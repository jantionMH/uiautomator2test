理论：RAS是一种神奇的东西，数学家和密码学家发明的，我是学渣就不过分解释了
 
实际应用：
           RAS 用途 ！！！！！！
               1.加密        2 解密
               3.加签        4.验签
               
               很多人都以为RAS只用来加密解密，却不知道加签和验签是另一种神奇的功能
               
           今天我就来说道说道，加签和验签
工作场景：  接口测试
对象：      测试工程师(python自动化方向), javascript初次接触者
知识储备等级： python 初中级   Javascripit入门级

OK!

开始表演：  
         pip install cryptodome
         注意！ Crypto不要安装，为了安装这个库，曾经大伤脑筋，因为crypto 需要安装一大堆依赖。费劲安装好之后，导入包重名，还要去改包名(改为Crypto，默认是crypto)
          时间太久远，记不得当时惨烈的状况了，抱歉！
          
         from Crypto.PublicKey import RSA
         from Crypto.Signature import PKCS1_v1_5
         from Crypto.Hash import MD5, SHA256
         from Crypto import Signature
         
         
         看道这些包名，不要慌，我来解释一下大概的作用。
         PKCS1_v1_5 是用来规范密钥的
         SHA256     是用来对信息进行“摘要”的。注意“摘要”是个专用名词，英文叫digest
         Signature  看名字就知道是签名相关的
         
         
         初步认识一下就好，混个脸熟
         像我这样良心的博主不多了，一步一步跟你解释，很负责！
         
         
         下面告诉你如何加签，请先手动生成密钥对！
         ps: 密钥对在哪里生成？   
             还记得大明湖畔的 git bash 吗？
             
         私钥生成：openssl genrsa -out private.pem 2048 
         公钥生成：openssl rsa -in private.pem -outform PEM -pubout -out public.pem
         
         def sin_deal():
                 with open(f='C:User\abc\private.pem') as f:     #打开读取密钥，python的基本操作，不会去死
                       private_key=f.read()                      #读取

                 raskey=RSA.importKey(private_key)               #引入新鲜出炉的私钥，importKey(),感觉这个方法名很友好，有没有？
                 singer=PKCS1_v1_5.new(rsakey)                   #这是啥？是不是很懵逼，其实就是把密码装入盒子，盒子名称叫Pkcs1,版本名叫作v1_5。singer是准备签名的你

                 data = data_deal(message)                       #自己写的方法，过滤数据格式，比如我这里需要处理的数据是：request={"a":"1","b":"2","c":"3"}
                                                                  处理成：a=1&b=2&c=3 ，sorted一下排序。。。。以后详细说吧 ps:request这玩意在javascript里叫json,而在python叫字典                                        
                 digest = SHA256.new()                           # SHA256 是给明文加上一段摘要信息，也就是给数据加密
                 digest.update(data.encode())                    # update 是把SHA256套进data,两者合二为一，注意encode()是把字符串data转成bytes类型，这是SHA256的规定
                
                 sign = signer.sign(digest)                      # singer 已经等待很久啦，终于等到 data被加密之后，两个人又相遇了，现在进行签名,sign()方法将两者合二为一
                 signature =base64.b64encode(sign)               # 最后来个万能的base64,不需要动脑，直接完成base64的编码工作
                 
         好！
         让我们来看javascript如何做同样的事！
         史上第一人，python和Javascript同时比较学习！
         我从未在网上看到同样的博文
         
         有点累了，休息一下喝杯奶茶再来。
         
         
         来了！
         希望大家都能精神饱满的，每时每刻用满满的energy活在你的世界！
         以下代码来自另一位开发工程师同仁，我只是阅读者！
         <script language="JavaScript" type="text/javascript" src="./jsrsasign-all-min.js"></script>   #类似import   js的引用文件放在文件的top，写法就是这样
         
        <html>                                                        
            <body>
                <script>
                      //html标签大家应该熟悉，我这里是创建了vscode的调试环境，所以放在html标签里，方便调用浏览器(F12,看console输出)
                      //以下是私钥，生成方式跟pyhton一样，在git bash 里出入
                      //私钥生成：openssl genrsa -out private.pem 2048 
                      // 公钥生成：openssl rsa -in private.pem -outform PEM -pubout -out public.pem
                      //这里的密码我加了 " ===xxx=== \n"+  不影响使用
                      
                      let prk="-----BEGIN RSA PRIVATE KEY-----\n"+
                      "MIIEpgIBAAKCAQEAruqz9+kW12YjNdCvwAsfhDhpvp8ylIDXZI8miW3k7U1/EwDT\n"+
                      "MsDlvn5HiJ8eNOBJ0nj+tHYK1iHmB5reSXQ1hdOwGFc/KHJEIZGabC0+fw1ckQjM\n"+
                      "gwTbIJUQYxANdb6yGHRXMlJl4BJXPDkEubIUSxztELr6+/q3vb5W4/Hjjx0sdfB7\n"+
                      "MDcg0m2Fk7JV9NIBWAnwRPJtlTMuc8ASDABYm2oJ30KDE/BvtyMxY35Z2NwDDO23\n"+
                      "d4P7OReTsuzWJSf8fRgpBw/irnJC6YjPqILJxHaFkbxlGeSnGKdBkO0F+MRdTHbm\n"+
                      "b9nq/q4nduq6ADm3l0vRJgGO35gW34OU95f0YwIDAQABAoIBAQCMUv3OBNCuPOJC\n"+
                      "agiUqFfAWwF6S3zoZfRmV/Eyj1b4iRNIy4CjVtz41ZXNpNk20jhnAWpUm95Vqxw/\n"+
                      "PZ7WjsPheNHstRGWARVnWMfpwOJCSxXXxJdNBLhGi096KYaizzlRJQRO+ouAFzak\n"+
                      "uZlw38wn9iy5H0f6nkiJkAllFMjaJdmQfYMX+i4P27RryfUEOLk0DTMkhjNXp/hh\n"+
                      "18yBcuzklb83d00xQ8wQwccVAuLQIrQeUM7Z5ffTzu3MLqmfp3VxxT8xA2uOnf+j\n"+
                      "yRLJvURZpcQD2as+ryYnK1Z26uXLFhMlAzNM9/oWRFeQGDC7wIftVD4FaWfjlkLy\n"+
                      "PgRKJ2EBAoGBANzFEyi5WQboXVQis9tQlvnP777kyrhs1JOGg9Ay2nWxLgRchoj9\n"+
                      "oOZ1hIN1z40wBYvYC60iiwSgH+sJADsbVHV3C86yLd8aXBLp1yz5/RECLDGXjQiJ\n"+
                      "lsq4iEMLzRtVs+CbNpRzwZEL7OlMFoMu8Ci9THg0NKBej4DrmwI9C0sFAoGBAMrU\n"+
                      "bulXkAJ+WWd4yua01etsViVKr3XAnwiSKX1myMvlZDPg5CdjCyW/cu+SBDl62KBW\n"+
                      "DAuunoF08Rtdl+SrAlMD5Im++n5FWtTW/AEDNMlRvpNYnmHmB0ET1/SJexU4+eci\n"+
                      "4rbfXuZr/BKYmZ/k1e1cvimbwX4ZlUCukTVbcm5HAoGBAMvld/x0srSehxPduR8l\n"+
                      "H0s5sMMtq80JNovKAJOZZAquyUFd8yMynBg9EVYYyMgtQfIWZzJQZPSwrsn0VjJA\n"+
                      "25BhkpYkGhmjzsXpEsKHYCMFTqu+vJLWAF7ab378t0I3tRoMQCx7fJrp2LTfgStH\n"+
                      "fqchri6WiMRUkVUQROmcV4HBAoGBAL4RBYIJ+LwtdFAfBFve15tOIQe/Dd7VSvH4\n"+
                      "LYMCn2VaJ2Tp+ELkcBzGY8kV1nmaoYbWO2FzF7uOPyX6tYylp37tZeqimQ9cpHpQ\n"+
                      "n0O/omaJAIIJCBoLOX8FPlg7wKgphRzQNw1REhfw1v0CHOuVv9Y3E0fgWhh1lsRP\n"+
                      "EWmjsP6fAoGBANPMCXFTTBGMhhB1npebJfqUF28vN4uWZ/X3ee6xqfYf1z8gRg1f\n"+
                      "Mq087lb8ULck+3EyRRVtyFlnd9fU+lW+BYNF2aDwEOKO41MiYhhMM6ovIwmLBD9X\n"+
                      "CL3tJx7XYdHhCDFy15HFAUZJhj7/CMSlh9ykPn7/NTu2sXO6RGlo5IwB\n"+
                      "-----END RSA PRIVATE KEY-----"
                      //function语言 函数名称 sign 传入参数 privateKey 和 str 
                      function sign(privateKey, str){
                       // Signature用了SHA256方式摘要，准备好
                       var signer = new KJUR.crypto.Signature({"alg": "SHA256withRSA"});
                       console.log(signer，'打印一下singer里的内容，python是print(),都是打印的意思')
                       signer.init(privateKey);
                       console.log('初始化私钥，python不需要这一步',signer)
                       
                       //准备数据清洗，输出格式为  key=value&key2=value2&key3=value3,并sort()排序
                       var sortdata = oprint(JSON.parse(str),true);
                       signer.updateString(str);
                       console.log(signer,'私钥和sortdata两者结合，相当于 key[sha256[data]],singer准备好SHA256来找sortdata整合，而python顺序是，key[data+SHA256]'data准备好SHA256来找key)
                       var hSigVal = signer.sign();
                       console.log(typeof(hSigVal),hSigVal,'最后来一波签名，sign()方式跟Python一样')
                       //base64编码，最后一步，方式跟python略不一样，但都很方便
                       return hextob64(hSigVal);
                      }
                      sign(prk,j);

        </script>
   
    </body>
</html>

 
 
 
 ok!
 休息一下，接下来将一将，作为python自动化测试工程师，在工作中遇到接口测试时，如何面对这些数据，以及一些小技巧。
 喝杯奶茶再来。
         
         
 来了！
      接口测试，http协议到今天我都说不清什么是3次握手4次挥手，只知道那是个神奇的过程！
      那么接口测试 http 如何发送请求，获取服务器响应呢，这个我知道，而且我精通！
      哈！像我这样的人，面试大厂的造大炮级别面试就会被淘汰吧！
      
   情况一：请求体转换json  
      improt requets,json
      
      采用session()机制，统一维护session()
      
      
      class testapi:
            def init(self):
                 self.session=requets.session()
            def login(self)：
            
                 data= {"s1": "s", "s2": "s", "s3":"e", "s4": "s"}
                 #有时候服务器需要的格式为json,而字典格式万一认不出的话会报错，为了谨慎，我们用json.dumps()转换一下
                 data=json.dumps(data)
                 re=self.seeion.post(url="https://?????????",data=data)
                 print(re.text)
                 
   情况二：多层json嵌套bytes结构        
      improt requets,json

      class testapi:
            def init(self):
                 self.session=requets.session()
            def login(self)：
                 #这是我们得到的数字签名，是个b''开头的bytes结构，在我的情况下，服务器无法处理带bytes的json体，所以我们要处理掉头尾的字节符号
                 signture=b'fKTKi9q3wJ5PhCYdWUW7v43cnQX+1ynOBRL5X+KiGulcbs8nPvtiWQ82Jr1aJHxoQmQnGgS8www/dnnfH2D0SJBbdJ92qd90EMuzl1NpYEit05kc63kyCDbIsTq+AuUE9LBiBIotdiZV79SmeD3eAdTfBAEF5x2qKIVWSmEENLqo33i9zsZBm6g1Gcqx86KMq+DBL/HE5I/XezcRZ28oAKdDvi8eXrz/SuaU0PURvHhgmhqwNqFGcppghHV84kHeuqYhtyNCBDbFkpuWeJ7mcyyPLFntQwHlwHVS0QK0rNMRTzWPJu1Yilv/4OJTshjTQX8AzdUgek4HaMvDdb7PYw=='
                 
                 #python切片了解一下，不光list可以切片，str也可以，先把bytes转化成str
                 s=str(signture)
                 #取从下标2的字符一直到倒数第二个字符
                 s_signture=s[2:-1]
                
                data= {"s1": "s", "sign": s_signture, "s3": {'a': '1', 'a1': '1', 'a2': '3'}, "s4": "s"}
                 data=json.dumps(data)
                 re=self.seeion.post(url="https://?????????",data=data)
                 print(re.text)
      
                 
      
      
     问题来了，上面的signture放在公网上会不会被别人知道我加密前的数据！！！！
     这个问题很严重！
     万一被破解了，岂不是泄露机密！
     
     放心，只有你没有我的公钥，是没有办法知道原始信息的
     这就RAS的厉害之处！
     
     原理我大概啰嗦一下！
     
     RAS 中文 非对称加密
     特点 4把密钥加密消息，缺少任何一把都无法破解消息，极度安全
     
     
     用户：公钥 私钥 ------------------- 服务器 ：公钥 私钥
      
      用户 私钥 签名————————————————> 服务器：拿用户的公钥验签，成功！
      服务器：私钥 签名 ————————————————————>用户：拿服务器的公钥验签,成功！
      
      四把钥匙你都得到的情况下，可以威胁到通信的安全，但是，你拿不到我的私钥，就算拿到了，也拿不到服务器的私钥
      
      晚安！
      9/11/2020
      
      
      
      
      
          
              

               
